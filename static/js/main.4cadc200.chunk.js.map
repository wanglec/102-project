{"version":3,"sources":["App.js","index.js"],"names":["App","World","useState","features","countries","setCountries","hoverD","setHoverD","useEffect","fetch","then","res","json","colorScale","d3","getVal","feat","properties","infection","Math","max","POP_EST","maxVal","useMemo","map","domain","width","height","globeImageUrl","backgroundImageUrl","lineHoverPrecision","polygonsData","filter","d","ISO_A2","polygonAltitude","polygonCapColor","polygonSideColor","polygonStrokeColor","polygonLabel","COUNTRY","death","recover","onPolygonHover","polygonsTransitionDuration","Typography","variant","style","display","flexDirection","justifyContent","Box","BarChart","data","country","layout","YAxis","type","dataKey","fontSize","XAxis","Tooltip","Legend","Bar","fill","total_vaccine","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cadc200.chunk.js","sourcesContent":["import Globe from 'react-globe.gl';\nimport { useState, useEffect, useMemo, React } from 'react';\nimport { Box, Typography } from '@material-ui/core'\nimport * as d3 from 'd3';\n//import GraphAll from './GraphAll';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from 'recharts';\n\nfunction App() {\n  const vac_data = [{country: 'China', total_vaccine: 366910000},\n    {country: 'USA', total_vaccine: 266596486.0},\n    {country: 'India', total_vaccine: 178361846},\n    {country: 'UK', total_vaccine: 54797640},\n    {country: 'Brazil', total_vaccine: 50308106},\n    {country: 'Germany', total_vaccine: 38646171},\n    {country: 'France', total_vaccine: 27455748},\n    {country: 'Italy', total_vaccine: 25948925},\n    {country: 'Turkey', total_vaccine: 25402277},\n    {country: 'Russia', total_vaccine: 22782931}];\n  \n  const infection_data = [{country: 'USA', infection: 32557444},\n    {country: 'India', infection: 21077410},\n    {country: 'Brazil', infection: 14930183},\n    {country: 'France', infection: 5767541},\n    {country: 'Turkey', infection: 4955594},\n    {country: 'Russia', infection: 4792354},\n    {country: 'UK', infection: 4441644},\n    {country: 'Italy', infection: 4070400},\n    {country: 'Spain', infection: 3551262},\n    {country: 'Germany', infection: 3484755}];\n\n  const World = () => {\n    const [countries, setCountries] = useState({ features: []});\n    const [hoverD, setHoverD] = useState();\n\n    useEffect(() => {\n      // load data\n      fetch('./covid.geojson').then(res => res.json()).then(setCountries);\n    }, []);\n\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n    // GDP per capita (avoiding countries with small pop)\n    const getVal = feat => feat.properties.infection / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(\n      () => Math.max(...countries.features.map(getVal)),\n      [countries]\n    );\n    colorScale.domain([0, maxVal]);\n\n    return <Globe\n      width={750}\n      height={750}\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n      backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n      lineHoverPrecision={0}\n\n      polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n      polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n      polygonCapColor={d => d === hoverD ? 'steelblue' : colorScale(getVal(d))}\n      polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n      polygonStrokeColor={() => '#111'}\n      polygonLabel={({ properties: d }) =>\n        `<Button>\n          <b >${d.COUNTRY} (${d.ISO_A2}):</b> <br />\n          <i style=\"color:red;\">Infection: ${d.infection}</i><br/>\n          <i style=\"color:black;\">Death: ${d.death}</i><br/>\n          <i style=\"color:blue;\">Recovery: ${d.recover}</i><br/>\n          <i>Population: ${d.POP_EST}</i>\n        </Button>`\n      }\n      onPolygonHover={setHoverD}\n      polygonsTransitionDuration={300}\n    />\n  };\n\n  return (\n    <div>\n      <Typography variant='h4' style={{display:'flex', flexDirection:'row', justifyContent:'center'}}>\n        COVID 19 Global Stats\n      </Typography>\n      <Box style={{display:'flex', flexDirection:'row', justifyContent:'space-between'}}>\n        <Box width='50vh'>\n          <h3>Most Infection Country</h3>\n          <BarChart width={450} height={300} data={infection_data} layout='vertical'>\n              <YAxis type=\"category\" dataKey=\"country\" fontSize='10'/>\n              <XAxis type=\"number\"/>\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"infection\" fill=\"#ff0000\" />\n          </BarChart>\n          <h3>Most Vaccination Country</h3>\n          <BarChart width={450} height={300} data={vac_data} layout='vertical'>\n              <YAxis type=\"category\" dataKey=\"country\" fontSize='10'/>\n              <XAxis type=\"number\"/>\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"total_vaccine\" fill=\"#8884d8\" />\n          </BarChart>\n        </Box>\n        <World /> \n      </Box>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}