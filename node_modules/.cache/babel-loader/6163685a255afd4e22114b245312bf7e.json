{"ast":null,"code":"var _jsxFileName = \"/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js\";\nimport Globe from 'react-globe.gl';\nimport { useState, useEffect, useMemo, React } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport * as d3 from 'd3'; //import GraphAll from './GraphAll';\n\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  var _s = $RefreshSig$();\n\n  const vac_data = [{\n    country: 'China',\n    total_vaccine: 366910000\n  }, {\n    country: 'USA',\n    total_vaccine: 266596486.0\n  }, {\n    country: 'India',\n    total_vaccine: 178361846\n  }, {\n    country: 'UK',\n    total_vaccine: 54797640\n  }, {\n    country: 'Brazil',\n    total_vaccine: 50308106\n  }, {\n    country: 'Germany',\n    total_vaccine: 38646171\n  }, {\n    country: 'France',\n    total_vaccine: 27455748\n  }, {\n    country: 'Italy',\n    total_vaccine: 25948925\n  }, {\n    country: 'Turkey',\n    total_vaccine: 25402277\n  }, {\n    country: 'Russia',\n    total_vaccine: 22782931\n  }];\n  const infection_data = [{\n    country: 'USA',\n    infection: 32557444\n  }, {\n    country: 'India',\n    infection: 21077410\n  }, {\n    country: 'Brazil',\n    infection: 14930183\n  }, {\n    country: 'France',\n    infection: 5767541\n  }, {\n    country: 'Turkey',\n    infection: 4955594\n  }, {\n    country: 'Russia',\n    infection: 4792354\n  }, {\n    country: 'UK',\n    infection: 4441644\n  }, {\n    country: 'Italy',\n    infection: 4070400\n  }, {\n    country: 'Spain',\n    infection: 3551262\n  }, {\n    country: 'Germany',\n    infection: 3484755\n  }];\n\n  const World = () => {\n    _s();\n\n    const [countries, setCountries] = useState({\n      features: []\n    });\n    const [hoverD, setHoverD] = useState();\n    useEffect(() => {\n      // load data\n      fetch('./covid.geojson').then(res => res.json()).then(setCountries);\n    }, []);\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd); // GDP per capita (avoiding countries with small pop)\n\n    const getVal = feat => feat.properties.infection / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n    colorScale.domain([0, maxVal]);\n    return /*#__PURE__*/_jsxDEV(Globe, {\n      width: 750,\n      height: 750,\n      globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n      backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n      lineHoverPrecision: 0,\n      polygonsData: countries.features.filter(d => d.properties.ISO_A2 !== 'AQ'),\n      polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n      polygonCapColor: d => d === hoverD ? 'steelblue' : colorScale(getVal(d)),\n      polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n      polygonStrokeColor: () => '#111',\n      polygonLabel: ({\n        properties: d\n      }) => `<Button>\n          <b >${d.COUNTRY} (${d.ISO_A2}):</b> <br />\n          <i style=\"color:red;\">Infection: ${d.infection}</i><br/>\n          <i style=\"color:black;\">Death: ${d.death}</i><br/>\n          <i style=\"color:blue;\">Recovery: ${d.recover}</i><br/>\n          <i>Population: ${d.POP_EST}</i>\n        </Button>`,\n      onPolygonHover: setHoverD,\n      polygonsTransitionDuration: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(World, \"zEB5Y/on/llzW9fsa8MB1EkVVA8=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: \"COVID 19 Global Stats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        width: \"50vh\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Most Infection Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n          width: 450,\n          height: 300,\n          data: infection_data,\n          layout: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(YAxis, {\n            type: \"category\",\n            dataKey: \"country\",\n            fontSize: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"infection\",\n            fill: \"#ff0000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Most Vaccination Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n          width: 450,\n          height: 300,\n          data: vac_data,\n          layout: \"vertical\",\n          children: [/*#__PURE__*/_jsxDEV(YAxis, {\n            type: \"category\",\n            dataKey: \"country\",\n            fontSize: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            type: \"number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"total_vaccine\",\n            fill: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(World, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js"],"names":["Globe","useState","useEffect","useMemo","React","Box","Typography","d3","BarChart","Bar","XAxis","YAxis","Tooltip","Legend","App","vac_data","country","total_vaccine","infection_data","infection","World","countries","setCountries","features","hoverD","setHoverD","fetch","then","res","json","colorScale","scaleSequentialSqrt","interpolateYlOrRd","getVal","feat","properties","Math","max","POP_EST","maxVal","map","domain","filter","d","ISO_A2","COUNTRY","death","recover","display","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import Globe from 'react-globe.gl';\nimport { useState, useEffect, useMemo, React } from 'react';\nimport { Box, Typography } from '@material-ui/core'\nimport * as d3 from 'd3';\n//import GraphAll from './GraphAll';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from 'recharts';\n\nfunction App() {\n  const vac_data = [{country: 'China', total_vaccine: 366910000},\n    {country: 'USA', total_vaccine: 266596486.0},\n    {country: 'India', total_vaccine: 178361846},\n    {country: 'UK', total_vaccine: 54797640},\n    {country: 'Brazil', total_vaccine: 50308106},\n    {country: 'Germany', total_vaccine: 38646171},\n    {country: 'France', total_vaccine: 27455748},\n    {country: 'Italy', total_vaccine: 25948925},\n    {country: 'Turkey', total_vaccine: 25402277},\n    {country: 'Russia', total_vaccine: 22782931}];\n  \n  const infection_data = [{country: 'USA', infection: 32557444},\n    {country: 'India', infection: 21077410},\n    {country: 'Brazil', infection: 14930183},\n    {country: 'France', infection: 5767541},\n    {country: 'Turkey', infection: 4955594},\n    {country: 'Russia', infection: 4792354},\n    {country: 'UK', infection: 4441644},\n    {country: 'Italy', infection: 4070400},\n    {country: 'Spain', infection: 3551262},\n    {country: 'Germany', infection: 3484755}];\n\n  const World = () => {\n    const [countries, setCountries] = useState({ features: []});\n    const [hoverD, setHoverD] = useState();\n\n    useEffect(() => {\n      // load data\n      fetch('./covid.geojson').then(res => res.json()).then(setCountries);\n    }, []);\n\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n    // GDP per capita (avoiding countries with small pop)\n    const getVal = feat => feat.properties.infection / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(\n      () => Math.max(...countries.features.map(getVal)),\n      [countries]\n    );\n    colorScale.domain([0, maxVal]);\n\n    return <Globe\n      width={750}\n      height={750}\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n      backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n      lineHoverPrecision={0}\n\n      polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n      polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n      polygonCapColor={d => d === hoverD ? 'steelblue' : colorScale(getVal(d))}\n      polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n      polygonStrokeColor={() => '#111'}\n      polygonLabel={({ properties: d }) =>\n        `<Button>\n          <b >${d.COUNTRY} (${d.ISO_A2}):</b> <br />\n          <i style=\"color:red;\">Infection: ${d.infection}</i><br/>\n          <i style=\"color:black;\">Death: ${d.death}</i><br/>\n          <i style=\"color:blue;\">Recovery: ${d.recover}</i><br/>\n          <i>Population: ${d.POP_EST}</i>\n        </Button>`\n      }\n      onPolygonHover={setHoverD}\n      polygonsTransitionDuration={300}\n    />\n  };\n\n  return (\n    <div>\n      <Typography>\n        COVID 19 Global Stats\n      </Typography>\n      <Box style={{display:'flex', flexDirection:'row', justifyContent:'space-between'}}>\n        <Box width='50vh'>\n          <h3>Most Infection Country</h3>\n          <BarChart width={450} height={300} data={infection_data} layout='vertical'>\n              <YAxis type=\"category\" dataKey=\"country\" fontSize='10'/>\n              <XAxis type=\"number\"/>\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"infection\" fill=\"#ff0000\" />\n          </BarChart>\n          <h3>Most Vaccination Country</h3>\n          <BarChart width={450} height={300} data={vac_data} layout='vertical'>\n              <YAxis type=\"category\" dataKey=\"country\" fontSize='10'/>\n              <XAxis type=\"number\"/>\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"total_vaccine\" fill=\"#8884d8\" />\n          </BarChart>\n        </Box>\n        <World /> \n      </Box>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}