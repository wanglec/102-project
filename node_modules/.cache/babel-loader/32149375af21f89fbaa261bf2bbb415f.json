{"ast":null,"code":"var _jsxFileName = \"/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/src/App.js\";\nimport Globe from 'react-globe.gl';\nimport { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport covidStats from './covidStats.json';\nimport geodata from './data.geojson';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  var _s = $RefreshSig$();\n\n  const World = () => {\n    _s();\n\n    const globeEl = useRef(); // const [covidData, setcovidData] = useState([]);\n    // const [countries, setCountries] = useState({ features: []});\n\n    const N = 300;\n    const gData = [...Array(N).keys()].map(() => ({\n      lat: (Math.random() - 0.5) * 180,\n      lng: (Math.random() - 0.5) * 360,\n      size: Math.random() / 3,\n      color: ['red', 'white', 'blue', 'green'][Math.round(Math.random() * 3)]\n    }));\n    console.log(gData);\n    useEffect(() => {\n      // Auto-rotate\n      globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.1;\n    }, []);\n    return /*#__PURE__*/_jsxDEV(Globe, {\n      ref: globeEl,\n      globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n      bumpImageUrl: \"//unpkg.com/three-globe/example/img/earth-topology.png\",\n      backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n      pointsData: gData,\n      pointAltitude: \"size\",\n      pointColor: \"color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this);\n  };\n\n  _s(World, \"EFxWCNvYXoXG6t8JTJFN0+m3ZSM=\");\n\n  return /*#__PURE__*/_jsxDEV(World, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/src/App.js"],"names":["Globe","useState","useEffect","useRef","d3","covidStats","geodata","App","World","globeEl","N","gData","Array","keys","map","lat","Math","random","lng","size","color","round","console","log","current","controls","autoRotate","autoRotateSpeed"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,UAAMC,OAAO,GAAGN,MAAM,EAAtB,CADkB,CAElB;AACA;;AAEA,UAAMO,CAAC,GAAG,GAAV;AACA,UAAMC,KAAK,GAAG,CAAC,GAAGC,KAAK,CAACF,CAAD,CAAL,CAASG,IAAT,EAAJ,EAAqBC,GAArB,CAAyB,OAAO;AAC5CC,MAAAA,GAAG,EAAE,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,IAAwB,GADe;AAE5CC,MAAAA,GAAG,EAAE,CAACF,IAAI,CAACC,MAAL,KAAgB,GAAjB,IAAwB,GAFe;AAG5CE,MAAAA,IAAI,EAAEH,IAAI,CAACC,MAAL,KAAgB,CAHsB;AAI5CG,MAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,OAAzB,EAAkCJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACC,MAAL,KAAgB,CAA3B,CAAlC;AAJqC,KAAP,CAAzB,CAAd;AAMAK,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AAGAT,IAAAA,SAAS,CAAC,MAAM;AACd;AACAO,MAAAA,OAAO,CAACe,OAAR,CAAgBC,QAAhB,GAA2BC,UAA3B,GAAwC,IAAxC;AACAjB,MAAAA,OAAO,CAACe,OAAR,CAAgBC,QAAhB,GAA2BE,eAA3B,GAA6C,GAA7C;AACD,KAJQ,EAIN,EAJM,CAAT;AAMF,wBACE,QAAC,KAAD;AACE,MAAA,GAAG,EAAElB,OADP;AAEE,MAAA,aAAa,EAAC,qDAFhB;AAGE,MAAA,YAAY,EAAC,wDAHf;AAIE,MAAA,kBAAkB,EAAC,mDAJrB;AAME,MAAA,UAAU,EAAEE,KANd;AAOE,MAAA,aAAa,EAAC,MAPhB;AAQE,MAAA,UAAU,EAAC;AARb;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAjCC;;AAFa,KAEPH,KAFO;;AAoCb,sBACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;KAvCQD,G;AAyCT,eAAeA,GAAf","sourcesContent":["import Globe from 'react-globe.gl';\nimport { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport covidStats from './covidStats.json'\nimport geodata from './data.geojson'\n\nfunction App() {\n\n  const World = () => {\n    const globeEl = useRef();\n    // const [covidData, setcovidData] = useState([]);\n    // const [countries, setCountries] = useState({ features: []});\n\n    const N = 300;\n    const gData = [...Array(N).keys()].map(() => ({\n      lat: (Math.random() - 0.5) * 180,\n      lng: (Math.random() - 0.5) * 360,\n      size: Math.random() / 3,\n      color: ['red', 'white', 'blue', 'green'][Math.round(Math.random() * 3)]\n    }));\n    console.log(gData)\n\n\n    useEffect(() => {\n      // Auto-rotate\n      globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.1;\n    }, []);\n\n  return (\n    <Globe\n      ref={globeEl}\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n      bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\n      backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n\n      pointsData={gData}\n      pointAltitude=\"size\"\n      pointColor=\"color\"\n    />\n  );\n}\n  return (\n    <World />\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}