{"ast":null,"code":"var _jsxFileName = \"/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js\";\nimport Globe from 'react-globe.gl';\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport covidStats from './covidStats.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar cors = require('cors');\n\nfunction App() {\n  var _s = $RefreshSig$();\n\n  // const World = () => {\n  //   const [countries, setCountries] = useState({ features: []});\n  //   const [hoverD, setHoverD] = useState();\n  //   useEffect(() => {\n  //     // load data\n  //     fetch('./ne_110m_admin_0_countries.geojson').then(res => res.json()).then(setCountries);\n  //   }, []);\n  //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n  //   // GDP per capita (avoiding countries with small pop)\n  //   const getVal = feat => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n  //   const maxVal = useMemo(\n  //     () => Math.max(...countries.features.map(getVal)),\n  //     [countries]\n  //   );\n  //   colorScale.domain([0, maxVal]);\n  //   return <Globe\n  //     globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n  //     backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n  //     lineHoverPrecision={0}\n  //     polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n  //     polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n  //     polygonCapColor={d => d === hoverD ? 'steelblue' : colorScale(getVal(d))}\n  //     polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n  //     polygonStrokeColor={() => '#111'}\n  //     polygonLabel={({ properties: d }) => `\n  //       <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n  //       GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n  //       Population: <i>${d.POP_EST}</i>\n  //     `}\n  //     onPolygonHover={setHoverD}\n  //     polygonsTransitionDuration={300}\n  //   />;\n  // };\n  const World = () => {\n    _s();\n\n    const globeEl = useRef();\n    const [popData, setPopData] = useState([]);\n    const [hoverD, setHoverD] = useState();\n    useEffect(() => {\n      // load data\n      fetch('./world_population.csv').then(res => res.text()).then(csv => d3.csvParse(csv, ({\n        lat,\n        lng,\n        pop\n      }) => ({\n        lat: +lat,\n        lng: +lng,\n        pop: +pop\n      }))).then(setPopData);\n    }, []);\n    useEffect(() => {\n      // Auto-rotate\n      globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.1;\n    }, []);\n    const weightColor = d3.scaleSequentialSqrt(d3.interpolateYlOrRd).domain([0, 1e7]);\n    return /*#__PURE__*/_jsxDEV(Globe, {\n      ref: globeEl,\n      globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n      bumpImageUrl: \"//unpkg.com/three-globe/example/img/earth-topology.png\",\n      backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n      hexBinPointsData: popData // hexBinPointWeight=\"pop\"\n      // hexAltitude={d => d === hoverD ? 0.12 : 0.06}\n      // hexBinResolution={4}\n      // hexTopColor={d => weightColor(d.sumWeight)}\n      // hexSideColor={d => weightColor(d.sumWeight)}\n      // hexBinMerge={true}\n      // enablePointerInteraction={false}\n      // polygonsData={popData}\n      ,\n      hexAltitude: d => d === hoverD ? 0.12 : 0.06,\n      polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n      polygonStrokeColor: () => '#111',\n      onPolygonHover: setHoverD,\n      polygonsTransitionDuration: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(World, \"UNIGHbKaE099qrEykilbwlvzJJs=\");\n\n  return /*#__PURE__*/_jsxDEV(World, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js"],"names":["Globe","useState","useEffect","useRef","useMemo","d3","covidStats","cors","require","App","World","globeEl","popData","setPopData","hoverD","setHoverD","fetch","then","res","text","csv","csvParse","lat","lng","pop","current","controls","autoRotate","autoRotateSpeed","weightColor","scaleSequentialSqrt","interpolateYlOrRd","domain","d"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsCC,OAAtC,QAAqD,OAArD;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,UAAMC,OAAO,GAAGR,MAAM,EAAtB;AACA,UAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,UAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,EAApC;AAGAC,IAAAA,SAAS,CAAC,MAAM;AACd;AACAc,MAAAA,KAAK,CAAC,wBAAD,CAAL,CAAgCC,IAAhC,CAAqCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA5C,EACGF,IADH,CACQG,GAAG,IAAIf,EAAE,CAACgB,QAAH,CAAYD,GAAZ,EAAiB,CAAC;AAAEE,QAAAA,GAAF;AAAOC,QAAAA,GAAP;AAAYC,QAAAA;AAAZ,OAAD,MAAwB;AAAEF,QAAAA,GAAG,EAAE,CAACA,GAAR;AAAaC,QAAAA,GAAG,EAAE,CAACA,GAAnB;AAAwBC,QAAAA,GAAG,EAAE,CAACA;AAA9B,OAAxB,CAAjB,CADf,EAEGP,IAFH,CAEQJ,UAFR;AAGD,KALQ,EAKN,EALM,CAAT;AAOAX,IAAAA,SAAS,CAAC,MAAM;AACd;AACAS,MAAAA,OAAO,CAACc,OAAR,CAAgBC,QAAhB,GAA2BC,UAA3B,GAAwC,IAAxC;AACAhB,MAAAA,OAAO,CAACc,OAAR,CAAgBC,QAAhB,GAA2BE,eAA3B,GAA6C,GAA7C;AACD,KAJQ,EAIN,EAJM,CAAT;AAMA,UAAMC,WAAW,GAAGxB,EAAE,CAACyB,mBAAH,CAAuBzB,EAAE,CAAC0B,iBAA1B,EACjBC,MADiB,CACV,CAAC,CAAD,EAAI,GAAJ,CADU,CAApB;AAGA,wBAAO,QAAC,KAAD;AACL,MAAA,GAAG,EAAErB,OADA;AAEL,MAAA,aAAa,EAAC,qDAFT;AAGL,MAAA,YAAY,EAAC,wDAHR;AAIL,MAAA,kBAAkB,EAAC,mDAJd;AAML,MAAA,gBAAgB,EAAEC,OANb,CAOL;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAhBK;AAiBL,MAAA,WAAW,EAAEqB,CAAC,IAAIA,CAAC,KAAKnB,MAAN,GAAe,IAAf,GAAsB,IAjBnC;AAkBL,MAAA,gBAAgB,EAAE,MAAM,uBAlBnB;AAmBL,MAAA,kBAAkB,EAAE,MAAM,MAnBrB;AAoBL,MAAA,cAAc,EAAEC,SApBX;AAqBL,MAAA,0BAA0B,EAAE;AArBvB;AAAA;AAAA;AAAA;AAAA,YAAP;AAuBD,GA7CD;;AA1Ca,KA0CPL,KA1CO;;AAwFb,sBACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;KA3FQD,G;AA6FT,eAAeA,GAAf","sourcesContent":["import Globe from 'react-globe.gl';\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport covidStats from './covidStats.json'\nvar cors = require('cors')\n\nfunction App() {\n\n  // const World = () => {\n  //   const [countries, setCountries] = useState({ features: []});\n  //   const [hoverD, setHoverD] = useState();\n\n  //   useEffect(() => {\n  //     // load data\n  //     fetch('./ne_110m_admin_0_countries.geojson').then(res => res.json()).then(setCountries);\n  //   }, []);\n\n  //   const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n  //   // GDP per capita (avoiding countries with small pop)\n  //   const getVal = feat => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n\n  //   const maxVal = useMemo(\n  //     () => Math.max(...countries.features.map(getVal)),\n  //     [countries]\n  //   );\n  //   colorScale.domain([0, maxVal]);\n\n  //   return <Globe\n  //     globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n  //     backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n  //     lineHoverPrecision={0}\n\n  //     polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n  //     polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n  //     polygonCapColor={d => d === hoverD ? 'steelblue' : colorScale(getVal(d))}\n  //     polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n  //     polygonStrokeColor={() => '#111'}\n  //     polygonLabel={({ properties: d }) => `\n  //       <b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n  //       GDP: <i>${d.GDP_MD_EST}</i> M$<br/>\n  //       Population: <i>${d.POP_EST}</i>\n  //     `}\n  //     onPolygonHover={setHoverD}\n  //     polygonsTransitionDuration={300}\n  //   />;\n  // };\n  \n  const World = () => {\n    const globeEl = useRef();\n    const [popData, setPopData] = useState([]);\n    const [hoverD, setHoverD] = useState();\n\n\n    useEffect(() => {\n      // load data\n      fetch('./world_population.csv').then(res => res.text())\n        .then(csv => d3.csvParse(csv, ({ lat, lng, pop }) => ({ lat: +lat, lng: +lng, pop: +pop })))\n        .then(setPopData);\n    }, []);\n\n    useEffect(() => {\n      // Auto-rotate\n      globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.1;\n    }, []);\n\n    const weightColor = d3.scaleSequentialSqrt(d3.interpolateYlOrRd)\n      .domain([0, 1e7]);\n\n    return <Globe\n      ref={globeEl}\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n      bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\n      backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n\n      hexBinPointsData={popData}\n      // hexBinPointWeight=\"pop\"\n      // hexAltitude={d => d === hoverD ? 0.12 : 0.06}\n      // hexBinResolution={4}\n      // hexTopColor={d => weightColor(d.sumWeight)}\n      // hexSideColor={d => weightColor(d.sumWeight)}\n      // hexBinMerge={true}\n      // enablePointerInteraction={false}\n\n\n      // polygonsData={popData}\n      hexAltitude={d => d === hoverD ? 0.12 : 0.06}\n      polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n      polygonStrokeColor={() => '#111'}\n      onPolygonHover={setHoverD}\n      polygonsTransitionDuration={300}\n    />;\n  };\n  return (\n    <World />\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}