{"ast":null,"code":"var _jsxFileName = \"/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport Globe from 'react-globe.gl';\nimport { useState, useEffect, useMemo, React } from 'react'; //import { makeStyles } from '@material-ui/core/styles';\n\nimport { Box, Typography, Button } from '@material-ui/core';\nimport * as d3 from 'd3';\nimport GraphAll from './GraphAll';\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const vac_data = [{\n    country: 'China',\n    total_vaccine: 366910000\n  }, {\n    country: 'USA',\n    total_vaccine: 266596486.0\n  }, {\n    country: 'India',\n    total_vaccine: 178361846\n  }, {\n    country: 'UK',\n    total_vaccine: 54797640\n  }, {\n    country: 'Brazil',\n    total_vaccine: 50308106\n  }, {\n    country: 'Germany',\n    total_vaccine: 38646171\n  }, {\n    country: 'France',\n    total_vaccine: 27455748\n  }, {\n    country: 'Italy',\n    total_vaccine: 25948925\n  }, {\n    country: 'Turkey',\n    total_vaccine: 25402277\n  }, {\n    country: 'Russia',\n    total_vaccine: 22782931\n  }];\n  const infection_data = [{\n    country: 'USA',\n    infection: 32557444\n  }, {\n    country: 'India',\n    infection: 21077410\n  }, {\n    country: 'Brazil',\n    infection: 14930183\n  }, {\n    country: 'France',\n    infection: 5767541\n  }, {\n    country: 'Turkey',\n    infection: 4955594\n  }, {\n    country: 'Russia',\n    infection: 4792354\n  }, {\n    country: 'UK',\n    infection: 4441644\n  }, {\n    country: 'Italy',\n    infection: 4070400\n  }, {\n    country: 'Spain',\n    infection: 3551262\n  }, {\n    country: 'Germany',\n    infection: 3484755\n  }];\n  const [page, setPage] = useState(0);\n\n  const World = () => {\n    _s();\n\n    const [countries, setCountries] = useState({\n      features: []\n    });\n    const [hoverD, setHoverD] = useState();\n    useEffect(() => {\n      // load data\n      fetch('./covid.geojson').then(res => res.json()).then(setCountries);\n    }, []);\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd); // GDP per capita (avoiding countries with small pop)\n\n    const getVal = feat => feat.properties.infection / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n    colorScale.domain([0, maxVal]);\n    return /*#__PURE__*/_jsxDEV(Globe, {\n      width: 750,\n      globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n      backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n      lineHoverPrecision: 0,\n      polygonsData: countries.features.filter(d => d.properties.ISO_A2 !== 'AQ'),\n      polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n      polygonCapColor: d => d === hoverD ? 'steelblue' : colorScale(getVal(d)),\n      polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n      polygonStrokeColor: () => '#111',\n      polygonLabel: ({\n        properties: d\n      }) => `<Button>\n          <b >${d.COUNTRY} (${d.ISO_A2}):</b> <br />\n          <i style=\"color:red;\">infection count: ${d.infection}</i><br/>\n          <i style=\"color:blue;\">vaccine count: ${d.total_vaccinations}</i><br/>\n          <i>Population: ${d.POP_EST}</i>\n        </Button>`,\n      onPolygonHover: setHoverD,\n      polygonsTransitionDuration: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(World, \"zEB5Y/on/llzW9fsa8MB1EkVVA8=\");\n\n  const changePage = () => {\n    if (page === 0) {\n      setPage(1);\n    } else {\n      setPage(0);\n    }\n  };\n\n  useEffect(() => {}, [page]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      width: \"50vh\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: changePage,\n        children: \"Change Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        width: 800,\n        height: 550,\n        data: vac_data,\n        layout: 'vertical',\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          dataKey: \"country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"total_vaccine\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), page === 0 ? /*#__PURE__*/_jsxDEV(World, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(GraphAll, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"HPzrZWH9eBjznL8xgTfWVnZD/Qw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js"],"names":["Globe","useState","useEffect","useMemo","React","Box","Typography","Button","d3","GraphAll","BarChart","Bar","CartesianGrid","XAxis","YAxis","Tooltip","Legend","App","vac_data","country","total_vaccine","infection_data","infection","page","setPage","World","countries","setCountries","features","hoverD","setHoverD","fetch","then","res","json","colorScale","scaleSequentialSqrt","interpolateYlOrRd","getVal","feat","properties","Math","max","POP_EST","maxVal","map","domain","filter","d","ISO_A2","COUNTRY","total_vaccinations","changePage","display","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import Globe from 'react-globe.gl';\nimport { useState, useEffect, useMemo, React } from 'react';\n//import { makeStyles } from '@material-ui/core/styles';\nimport { Box, Typography, Button } from '@material-ui/core'\nimport * as d3 from 'd3';\nimport GraphAll from './GraphAll';\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\n\nfunction App() {\n  const vac_data = [{country: 'China', total_vaccine: 366910000},\n    {country: 'USA', total_vaccine: 266596486.0},\n    {country: 'India', total_vaccine: 178361846},\n    {country: 'UK', total_vaccine: 54797640},\n    {country: 'Brazil', total_vaccine: 50308106},\n    {country: 'Germany', total_vaccine: 38646171},\n    {country: 'France', total_vaccine: 27455748},\n    {country: 'Italy', total_vaccine: 25948925},\n    {country: 'Turkey', total_vaccine: 25402277},\n    {country: 'Russia', total_vaccine: 22782931}];\n  \n  const infection_data = [{country: 'USA', infection: 32557444},\n    {country: 'India', infection: 21077410},\n    {country: 'Brazil', infection: 14930183},\n    {country: 'France', infection: 5767541},\n    {country: 'Turkey', infection: 4955594},\n    {country: 'Russia', infection: 4792354},\n    {country: 'UK', infection: 4441644},\n    {country: 'Italy', infection: 4070400},\n    {country: 'Spain', infection: 3551262},\n    {country: 'Germany', infection: 3484755}];\n\n  const [page, setPage] = useState(0);\n\n  const World = () => {\n    const [countries, setCountries] = useState({ features: []});\n    const [hoverD, setHoverD] = useState();\n\n    useEffect(() => {\n      // load data\n      fetch('./covid.geojson').then(res => res.json()).then(setCountries);\n    }, []);\n\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n    // GDP per capita (avoiding countries with small pop)\n    const getVal = feat => feat.properties.infection / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(\n      () => Math.max(...countries.features.map(getVal)),\n      [countries]\n    );\n    colorScale.domain([0, maxVal]);\n\n    return <Globe\n      width={750}\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n      backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n      lineHoverPrecision={0}\n\n      polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n      polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n      polygonCapColor={d => d === hoverD ? 'steelblue' : colorScale(getVal(d))}\n      polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n      polygonStrokeColor={() => '#111'}\n      polygonLabel={({ properties: d }) =>\n        `<Button>\n          <b >${d.COUNTRY} (${d.ISO_A2}):</b> <br />\n          <i style=\"color:red;\">infection count: ${d.infection}</i><br/>\n          <i style=\"color:blue;\">vaccine count: ${d.total_vaccinations}</i><br/>\n          <i>Population: ${d.POP_EST}</i>\n        </Button>`\n      }\n      onPolygonHover={setHoverD}\n      polygonsTransitionDuration={300}\n    />\n  };\n\n  const changePage = () => {\n    if (page === 0) {\n      setPage(1);\n    } else {\n      setPage(0);\n    }\n  }\n\n  useEffect(() => {\n\n  }, [page])\n\n  return (\n    <Box style={{display:'flex', flexDirection:'row', justifyContent:'space-between'}}>\n      <Box width='50vh'>\n        <Button onClick={changePage}>\n          Change Page\n        </Button>\n        {/* <BarChart width={500} height={250} data={infection_data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"country\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"infection\" fill=\"#ff0000\" />\n        </BarChart> */}\n        <BarChart width={800} height={550} data={vac_data} layout={'vertical'}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <YAxis dataKey=\"country\" />\n            <XAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"total_vaccine\" fill=\"#8884d8\" />\n        </BarChart>\n      </Box>\n      {page === 0 ? <World /> : <GraphAll />}\n    </Box>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}