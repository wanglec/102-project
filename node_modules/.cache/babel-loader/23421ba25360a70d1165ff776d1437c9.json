{"ast":null,"code":"var _jsxFileName = \"/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport Globe from 'react-globe.gl';\nimport { useState, useEffect, useRef, useMemo, React } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport * as d3 from 'd3';\nimport lineChart from './lineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  paper: {\n    width: '70px',\n    height: '80px',\n    background: 'blue'\n  },\n  title: {\n    fontSize: 14\n  }\n});\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n\n  const World = () => {\n    _s();\n\n    const [countries, setCountries] = useState({\n      features: []\n    });\n    const [hoverD, setHoverD] = useState();\n    useEffect(() => {\n      // load data\n      fetch('./covid.geojson').then(res => res.json()).then(setCountries);\n    }, []);\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd); // GDP per capita (avoiding countries with small pop)\n\n    const getVal = feat => feat.properties.infection / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n    colorScale.domain([0, maxVal]);\n    return /*#__PURE__*/_jsxDEV(Globe, {\n      globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n      backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n      lineHoverPrecision: 0,\n      polygonsData: countries.features.filter(d => d.properties.ISO_A2 !== 'AQ'),\n      polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n      polygonCapColor: d => d === hoverD ? 'steelblue' : colorScale(getVal(d)),\n      polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n      polygonStrokeColor: () => '#111',\n      polygonLabel: ({\n        properties: d\n      }) => `<Button>\n          <b >${d.COUNTRY} (${d.ISO_A2}):</b> <br />\n          <i style=\"color:red;\">infection count: ${d.infection}</i><br/>\n          <i style=\"color:blue;\">vaccine count: ${d.total_vaccinations}</i><br/>\n          <i>Population: ${d.POP_EST}</i>\n        </Button>`,\n      onPolygonHover: setHoverD,\n      polygonsTransitionDuration: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(World, \"zEB5Y/on/llzW9fsa8MB1EkVVA8=\");\n\n  const changePage = () => {\n    if (page === 0) {\n      setPage(1);\n    } else {\n      setPage(0);\n    }\n  };\n\n  useEffect(() => {}, [page]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: changePage,\n      children: \"Change Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), page === 0 ? /*#__PURE__*/_jsxDEV(World, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"lineChart\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"WKqAu+op8qNw4wpjG8LikBQcgDY=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js"],"names":["Globe","useState","useEffect","useRef","useMemo","React","makeStyles","Button","Typography","d3","lineChart","useStyles","paper","width","height","background","title","fontSize","App","classes","page","setPage","World","countries","setCountries","features","hoverD","setHoverD","fetch","then","res","json","colorScale","scaleSequentialSqrt","interpolateYlOrRd","getVal","feat","properties","infection","Math","max","POP_EST","maxVal","map","domain","filter","d","ISO_A2","COUNTRY","total_vaccinations","changePage"],"mappings":"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","sourcesContent":["import Globe from 'react-globe.gl';\nimport { useState, useEffect, useRef, useMemo, React } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport * as d3 from 'd3';\nimport lineChart from './lineChart';\n\nconst useStyles = makeStyles({\n  paper: {\n    width: '70px',\n    height: '80px',\n    background: 'blue',\n  },\n  title: {\n    fontSize: 14,\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n\n  const World = () => {\n    const [countries, setCountries] = useState({ features: []});\n    const [hoverD, setHoverD] = useState();\n\n    useEffect(() => {\n      // load data\n      fetch('./covid.geojson').then(res => res.json()).then(setCountries);\n    }, []);\n\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n    // GDP per capita (avoiding countries with small pop)\n    const getVal = feat => feat.properties.infection / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(\n      () => Math.max(...countries.features.map(getVal)),\n      [countries]\n    );\n    colorScale.domain([0, maxVal]);\n\n    return <Globe\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n      backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n      lineHoverPrecision={0}\n\n      polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n      polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n      polygonCapColor={d => d === hoverD ? 'steelblue' : colorScale(getVal(d))}\n      polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n      polygonStrokeColor={() => '#111'}\n      polygonLabel={({ properties: d }) =>\n        `<Button>\n          <b >${d.COUNTRY} (${d.ISO_A2}):</b> <br />\n          <i style=\"color:red;\">infection count: ${d.infection}</i><br/>\n          <i style=\"color:blue;\">vaccine count: ${d.total_vaccinations}</i><br/>\n          <i>Population: ${d.POP_EST}</i>\n        </Button>`\n      }\n      onPolygonHover={setHoverD}\n      polygonsTransitionDuration={300}\n    />\n  };\n\n  const changePage = () => {\n    if (page === 0) {\n      setPage(1)\n    } else {\n      setPage(0)\n    }\n  }\n\n  useEffect(() => {\n\n  }, [page])\n\n  return (\n    <div>\n      <Button onClick={changePage}>\n        Change Page\n      </Button>  \n      {page === 0 ? <World /> : <lineChart/>}\n      \n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}