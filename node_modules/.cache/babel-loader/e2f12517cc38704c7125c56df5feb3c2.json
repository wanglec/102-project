{"ast":null,"code":"// sorts the polygons so that the holes are grouped with their parent polygon\n// https://github.com/d3/d3-contour/blob/master/src/contours.js\nimport contains from \"./contains.js\";\nimport area from \"./area.js\";\nexport default function (rings) {\n  const polygons = [],\n        holes = [];\n\n  for (const ring of rings) {\n    if (area(ring) > 0) polygons.push([ring]);else holes.push(ring);\n  }\n\n  holes.forEach(function (hole) {\n    for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n      if (contains((polygon = polygons[i])[0], hole) !== -1) {\n        polygon.push(hole);\n        return;\n      }\n    }\n  });\n  return polygons;\n}","map":{"version":3,"sources":["/Users/lechuanwang/node_modules/d3-tricontour/src/ringsort.js"],"names":["contains","area","rings","polygons","holes","ring","push","forEach","hole","i","n","length","polygon"],"mappings":"AAAA;AACA;AACA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,eAAe,UAASC,KAAT,EAAgB;AAC7B,QAAMC,QAAQ,GAAG,EAAjB;AAAA,QACEC,KAAK,GAAG,EADV;;AAGA,OAAK,MAAMC,IAAX,IAAmBH,KAAnB,EAA0B;AACxB,QAAID,IAAI,CAACI,IAAD,CAAJ,GAAa,CAAjB,EAAoBF,QAAQ,CAACG,IAAT,CAAc,CAACD,IAAD,CAAd,EAApB,KACKD,KAAK,CAACE,IAAN,CAAWD,IAAX;AACN;;AAEDD,EAAAA,KAAK,CAACG,OAAN,CAAc,UAASC,IAAT,EAAe;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGP,QAAQ,CAACQ,MAAxB,EAAgCC,OAArC,EAA8CH,CAAC,GAAGC,CAAlD,EAAqD,EAAED,CAAvD,EAA0D;AACxD,UAAIT,QAAQ,CAAC,CAACY,OAAO,GAAGT,QAAQ,CAACM,CAAD,CAAnB,EAAwB,CAAxB,CAAD,EAA6BD,IAA7B,CAAR,KAA+C,CAAC,CAApD,EAAuD;AACrDI,QAAAA,OAAO,CAACN,IAAR,CAAaE,IAAb;AACA;AACD;AACF;AACF,GAPD;AASA,SAAOL,QAAP;AACD","sourcesContent":["// sorts the polygons so that the holes are grouped with their parent polygon\n// https://github.com/d3/d3-contour/blob/master/src/contours.js\nimport contains from \"./contains.js\";\nimport area from \"./area.js\";\n\nexport default function(rings) {\n  const polygons = [],\n    holes = [];\n\n  for (const ring of rings) {\n    if (area(ring) > 0) polygons.push([ring]);\n    else holes.push(ring);\n  }\n\n  holes.forEach(function(hole) {\n    for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n      if (contains((polygon = polygons[i])[0], hole) !== -1) {\n        polygon.push(hole);\n        return;\n      }\n    }\n  });\n\n  return polygons;\n}"]},"metadata":{},"sourceType":"module"}