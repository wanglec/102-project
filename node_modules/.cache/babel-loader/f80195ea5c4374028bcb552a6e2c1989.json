{"ast":null,"code":"var _jsxFileName = \"/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js\";\nimport Globe from 'react-globe.gl';\nimport { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport covidStats from './covidStats.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar cors = require('cors');\n\nfunction App() {\n  var _s = $RefreshSig$();\n\n  const World = () => {\n    _s();\n\n    const globeEl = useRef();\n    const [countries, setCountries] = useState({\n      features: []\n    });\n    const [altitude, setAltitude] = useState(0.1);\n    const [transitionDuration, setTransitionDuration] = useState(1000);\n    useEffect(() => {\n      // load data\n      fetch('../datasets/ne_110m_admin_0_countries.geojson').then(res => res.json()).then(countries => {\n        setCountries(countries);\n        setTimeout(() => {\n          setTransitionDuration(4000);\n          setAltitude(() => feat => Math.max(0.1, Math.sqrt(+feat.properties.POP_EST) * 7e-5));\n        }, 3000);\n      });\n    }, []);\n    useEffect(() => {\n      // Auto-rotate\n      globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.3;\n      globeEl.current.pointOfView({\n        altitude: 4\n      }, 5000);\n    }, []);\n    return /*#__PURE__*/_jsxDEV(Globe, {\n      ref: globeEl,\n      globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-dark.jpg\",\n      polygonsData: countries.features.filter(d => d.properties.ISO_A2 !== 'AQ'),\n      polygonAltitude: altitude,\n      polygonCapColor: () => 'rgba(200, 0, 0, 0.6)',\n      polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n      polygonLabel: ({\n        properties: d\n      }) => `\n        <b>${d.ADMIN} (${d.ISO_A2})</b> <br />\n        Population: <i>${Math.round(+d.POP_EST / 1e4) / 1e2}M</i>\n      `,\n      polygonsTransitionDuration: transitionDuration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(World, \"sTak6u41IoJ4pvWT6p2d3OJJ4/4=\");\n\n  return /*#__PURE__*/_jsxDEV(World, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js"],"names":["Globe","useState","useEffect","useRef","d3","covidStats","cors","require","App","World","globeEl","countries","setCountries","features","altitude","setAltitude","transitionDuration","setTransitionDuration","fetch","then","res","json","setTimeout","feat","Math","max","sqrt","properties","POP_EST","current","controls","autoRotate","autoRotateSpeed","pointOfView","filter","d","ISO_A2","ADMIN","round"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,UAAMC,OAAO,GAAGP,MAAM,EAAtB;AACA,UAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC;AAAEY,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAA1C;AACA,UAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,GAAD,CAAxC;AACA,UAAM,CAACe,kBAAD,EAAqBC,qBAArB,IAA8ChB,QAAQ,CAAC,IAAD,CAA5D;AAEAC,IAAAA,SAAS,CAAC,MAAM;AACd;AACAgB,MAAAA,KAAK,CAAC,+CAAD,CAAL,CAAuDC,IAAvD,CAA4DC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAnE,EACGF,IADH,CACQR,SAAS,IAAG;AAChBC,QAAAA,YAAY,CAACD,SAAD,CAAZ;AAEAW,QAAAA,UAAU,CAAC,MAAM;AACfL,UAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAF,UAAAA,WAAW,CAAC,MAAMQ,IAAI,IAAIC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcD,IAAI,CAACE,IAAL,CAAU,CAACH,IAAI,CAACI,UAAL,CAAgBC,OAA3B,IAAsC,IAApD,CAAf,CAAX;AACD,SAHS,EAGP,IAHO,CAAV;AAID,OARH;AASD,KAXQ,EAWN,EAXM,CAAT;AAaA1B,IAAAA,SAAS,CAAC,MAAM;AACd;AACAQ,MAAAA,OAAO,CAACmB,OAAR,CAAgBC,QAAhB,GAA2BC,UAA3B,GAAwC,IAAxC;AACArB,MAAAA,OAAO,CAACmB,OAAR,CAAgBC,QAAhB,GAA2BE,eAA3B,GAA6C,GAA7C;AAEAtB,MAAAA,OAAO,CAACmB,OAAR,CAAgBI,WAAhB,CAA4B;AAAEnB,QAAAA,QAAQ,EAAE;AAAZ,OAA5B,EAA6C,IAA7C;AACD,KANQ,EAMN,EANM,CAAT;AASA,wBAAO,QAAC,KAAD;AACL,MAAA,GAAG,EAAEJ,OADA;AAEL,MAAA,aAAa,EAAC,oDAFT;AAIL,MAAA,YAAY,EAAEC,SAAS,CAACE,QAAV,CAAmBqB,MAAnB,CAA0BC,CAAC,IAAIA,CAAC,CAACR,UAAF,CAAaS,MAAb,KAAwB,IAAvD,CAJT;AAKL,MAAA,eAAe,EAAEtB,QALZ;AAML,MAAA,eAAe,EAAE,MAAM,sBANlB;AAOL,MAAA,gBAAgB,EAAE,MAAM,uBAPnB;AAQL,MAAA,YAAY,EAAE,CAAC;AAAEa,QAAAA,UAAU,EAAEQ;AAAd,OAAD,KAAwB;AAC5C,aAAaA,CAAC,CAACE,KAAM,KAAIF,CAAC,CAACC,MAAO;AAClC,yBAAyBZ,IAAI,CAACc,KAAL,CAAW,CAACH,CAAC,CAACP,OAAH,GAAa,GAAxB,IAA+B,GAAI;AAC5D,OAXW;AAYL,MAAA,0BAA0B,EAAEZ;AAZvB;AAAA;AAAA;AAAA;AAAA,YAAP;AAcC,GA1CH;;AAFa,KAEPP,KAFO;;AA8Cb,sBACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;KAjDQD,G;AAmDT,eAAeA,GAAf","sourcesContent":["import Globe from 'react-globe.gl';\nimport { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport covidStats from './covidStats.json'\nvar cors = require('cors')\n\nfunction App() {\n\n  const World = () => {\n    const globeEl = useRef();\n    const [countries, setCountries] = useState({ features: []});\n    const [altitude, setAltitude] = useState(0.1);\n    const [transitionDuration, setTransitionDuration] = useState(1000);\n\n    useEffect(() => {\n      // load data\n      fetch('../datasets/ne_110m_admin_0_countries.geojson').then(res => res.json())\n        .then(countries=> {\n          setCountries(countries);\n\n          setTimeout(() => {\n            setTransitionDuration(4000);\n            setAltitude(() => feat => Math.max(0.1, Math.sqrt(+feat.properties.POP_EST) * 7e-5));\n          }, 3000);\n        });\n    }, []);\n\n    useEffect(() => {\n      // Auto-rotate\n      globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.3;\n\n      globeEl.current.pointOfView({ altitude: 4 }, 5000);\n    }, []);\n\n\n    return <Globe\n      ref={globeEl}\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-dark.jpg\"\n\n      polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n      polygonAltitude={altitude}\n      polygonCapColor={() => 'rgba(200, 0, 0, 0.6)'}\n      polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n      polygonLabel={({ properties: d }) => `\n        <b>${d.ADMIN} (${d.ISO_A2})</b> <br />\n        Population: <i>${Math.round(+d.POP_EST / 1e4) / 1e2}M</i>\n      `}\n      polygonsTransitionDuration={transitionDuration}\n    />;\n    };\n\n  return (\n    <World />\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}