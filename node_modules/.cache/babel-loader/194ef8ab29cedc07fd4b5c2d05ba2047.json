{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport earcut from 'earcut';\nimport { geoDistance, geoInterpolate } from 'd3-geo';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = o[Symbol.iterator]();\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar interpolateLine = function interpolateLine() {\n  var lineCoords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var maxDegDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var result = [];\n  var prevPnt = null;\n  lineCoords.forEach(function (pnt) {\n    if (prevPnt) {\n      var dist = geoDistance(pnt, prevPnt) * 180 / Math.PI;\n\n      if (dist > maxDegDistance) {\n        var interpol = geoInterpolate(prevPnt, pnt);\n        var tStep = 1 / Math.ceil(dist / maxDegDistance);\n        var t = tStep;\n\n        while (t < 1) {\n          result.push(interpol(t));\n          t += tStep;\n        }\n      }\n    }\n\n    result.push(prevPnt = pnt);\n  });\n  return result;\n};\n\nvar THREE = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  BufferGeometry: BufferGeometry,\n  Float32BufferAttribute: Float32BufferAttribute\n};\nvar setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\n\nfunction GeoJsonGeometry(geoJson) {\n  var _this = this;\n\n  var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n  THREE.BufferGeometry.call(this);\n  this.type = 'GeoJsonGeometry';\n  this.parameters = {\n    geoJson: geoJson,\n    radius: radius,\n    resolution: resolution\n  }; // process various geometry types\n\n  var groups = ({\n    Point: genPoint,\n    MultiPoint: genMultiPoint,\n    LineString: genLineString,\n    MultiLineString: genMultiLineString,\n    Polygon: genPolygon,\n    MultiPolygon: genMultiPolygon\n  }[geoJson.type] || function () {\n    return [];\n  })(geoJson.coordinates, radius); // concat groups\n\n\n  var indices = [],\n      vertices = [];\n  var groupCnt = 0;\n  groups.forEach(function (newG) {\n    var prevIndCnt = indices.length;\n    concatGroup({\n      indices: indices,\n      vertices: vertices\n    }, newG);\n\n    _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);\n  }); // build geometry\n\n  indices.length && this.setIndex(indices);\n  vertices.length && this[setAttributeFn]('position', new THREE.Float32BufferAttribute(vertices, 3)); //\n\n  function genPoint(coords, r) {\n    var vertices = polar2Cartesian(coords[1], coords[0], r);\n    var indices = [];\n    return [{\n      vertices: vertices,\n      indices: indices\n    }];\n  }\n\n  function genMultiPoint(coords, r) {\n    var result = {\n      vertices: [],\n      indices: []\n    };\n    coords.map(function (c) {\n      return genPoint(c, r);\n    }).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          newPnt = _ref2[0];\n\n      concatGroup(result, newPnt);\n    });\n    return [result];\n  }\n\n  function genLineString(coords, r) {\n    var coords3d = interpolateLine(coords, resolution).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          lng = _ref4[0],\n          lat = _ref4[1];\n\n      return polar2Cartesian(lat, lng, r);\n    });\n\n    var _earcut$flatten = earcut.flatten([coords3d]),\n        vertices = _earcut$flatten.vertices;\n\n    var numPoints = Math.round(vertices.length / 3);\n    var indices = [];\n\n    for (var vIdx = 1; vIdx < numPoints; vIdx++) {\n      indices.push(vIdx - 1, vIdx);\n    }\n\n    return [{\n      vertices: vertices,\n      indices: indices\n    }];\n  }\n\n  function genMultiLineString(coords, r) {\n    var result = {\n      vertices: [],\n      indices: []\n    };\n    coords.map(function (c) {\n      return genLineString(c, r);\n    }).forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          newLine = _ref6[0];\n\n      concatGroup(result, newLine);\n    });\n    return [result];\n  }\n\n  function genPolygon(coords, r) {\n    var coords3d = coords.map(function (coordsSegment) {\n      return interpolateLine(coordsSegment, resolution).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            lng = _ref8[0],\n            lat = _ref8[1];\n\n        return polar2Cartesian(lat, lng, r);\n      });\n    }); // Each point generates 3 vertice items (x,y,z).\n\n    var _earcut$flatten2 = earcut.flatten(coords3d),\n        vertices = _earcut$flatten2.vertices,\n        holes = _earcut$flatten2.holes;\n\n    var firstHoleIdx = holes[0] || Infinity;\n    var outerVertices = vertices.slice(0, firstHoleIdx);\n    var holeVertices = vertices.slice(firstHoleIdx);\n    var holesIdx = new Set(holes);\n    var numPoints = Math.round(vertices.length / 3);\n    var outerIndices = [],\n        holeIndices = [];\n\n    for (var vIdx = 1; vIdx < numPoints; vIdx++) {\n      if (!holesIdx.has(vIdx)) {\n        if (vIdx < firstHoleIdx) {\n          outerIndices.push(vIdx - 1, vIdx);\n        } else {\n          holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);\n        }\n      }\n    }\n\n    var groups = [{\n      indices: outerIndices,\n      vertices: outerVertices\n    }];\n\n    if (holes.length) {\n      groups.push({\n        indices: holeIndices,\n        vertices: holeVertices\n      });\n    }\n\n    return groups;\n  }\n\n  function genMultiPolygon(coords, r) {\n    var outer = {\n      vertices: [],\n      indices: []\n    };\n    var holes = {\n      vertices: [],\n      indices: []\n    };\n    coords.map(function (c) {\n      return genPolygon(c, r);\n    }).forEach(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n          newOuter = _ref10[0],\n          newHoles = _ref10[1];\n\n      concatGroup(outer, newOuter);\n      newHoles && concatGroup(holes, newHoles);\n    });\n    var groups = [outer];\n    holes.vertices.length && groups.push(holes);\n    return groups;\n  }\n}\n\nGeoJsonGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nGeoJsonGeometry.prototype.constructor = GeoJsonGeometry; //\n\nfunction concatGroup(main, extra) {\n  var prevVertCnt = Math.round(main.vertices.length / 3);\n  concatArr(main.vertices, extra.vertices);\n  concatArr(main.indices, extra.indices.map(function (ind) {\n    return ind + prevVertCnt;\n  }));\n}\n\nfunction concatArr(target, src) {\n  var _iterator = _createForOfIteratorHelper(src),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var e = _step.value;\n      target.push(e);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction polar2Cartesian(lat, lng) {\n  var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var phi = (90 - lat) * Math.PI / 180;\n  var theta = (90 - lng) * Math.PI / 180;\n  return [r * Math.sin(phi) * Math.cos(theta), // x\n  r * Math.cos(phi), // y\n  r * Math.sin(phi) * Math.sin(theta) // z\n  ];\n}\n\nexport { GeoJsonGeometry };","map":{"version":3,"sources":["/Users/lechuanwang/node_modules/three-geojson-geometry/dist/three-geojson-geometry.module.js"],"names":["BufferGeometry","Float32BufferAttribute","earcut","geoDistance","geoInterpolate","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","test","len","arr2","TypeError","_createForOfIteratorHelper","allowArrayLike","it","F","s","e","f","normalCompletion","didErr","step","return","interpolateLine","lineCoords","arguments","maxDegDistance","result","prevPnt","forEach","pnt","dist","Math","PI","interpol","tStep","ceil","t","THREE","window","setAttributeFn","setAttribute","GeoJsonGeometry","geoJson","_this","radius","resolution","type","parameters","groups","Point","genPoint","MultiPoint","genMultiPoint","LineString","genLineString","MultiLineString","genMultiLineString","Polygon","genPolygon","MultiPolygon","genMultiPolygon","coordinates","indices","vertices","groupCnt","newG","prevIndCnt","concatGroup","addGroup","setIndex","coords","r","polar2Cartesian","map","c","_ref","_ref2","newPnt","coords3d","_ref3","_ref4","lng","lat","_earcut$flatten","flatten","numPoints","round","vIdx","_ref5","_ref6","newLine","coordsSegment","_ref7","_ref8","_earcut$flatten2","holes","firstHoleIdx","Infinity","outerVertices","holeVertices","holesIdx","Set","outerIndices","holeIndices","has","outer","_ref9","_ref10","newOuter","newHoles","create","main","extra","prevVertCnt","concatArr","ind","target","src","_iterator","_step","phi","theta","sin","cos"],"mappings":"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","sourcesContent":["import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport earcut from 'earcut';\nimport { geoDistance, geoInterpolate } from 'd3-geo';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = o[Symbol.iterator]();\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar interpolateLine = function interpolateLine() {\n  var lineCoords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var maxDegDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var result = [];\n  var prevPnt = null;\n  lineCoords.forEach(function (pnt) {\n    if (prevPnt) {\n      var dist = geoDistance(pnt, prevPnt) * 180 / Math.PI;\n\n      if (dist > maxDegDistance) {\n        var interpol = geoInterpolate(prevPnt, pnt);\n        var tStep = 1 / Math.ceil(dist / maxDegDistance);\n        var t = tStep;\n\n        while (t < 1) {\n          result.push(interpol(t));\n          t += tStep;\n        }\n      }\n    }\n\n    result.push(prevPnt = pnt);\n  });\n  return result;\n};\n\nvar THREE = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  BufferGeometry: BufferGeometry,\n  Float32BufferAttribute: Float32BufferAttribute\n};\n\nvar setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\n\nfunction GeoJsonGeometry(geoJson) {\n  var _this = this;\n\n  var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n  THREE.BufferGeometry.call(this);\n  this.type = 'GeoJsonGeometry';\n  this.parameters = {\n    geoJson: geoJson,\n    radius: radius,\n    resolution: resolution\n  }; // process various geometry types\n\n  var groups = ({\n    Point: genPoint,\n    MultiPoint: genMultiPoint,\n    LineString: genLineString,\n    MultiLineString: genMultiLineString,\n    Polygon: genPolygon,\n    MultiPolygon: genMultiPolygon\n  }[geoJson.type] || function () {\n    return [];\n  })(geoJson.coordinates, radius); // concat groups\n\n\n  var indices = [],\n      vertices = [];\n  var groupCnt = 0;\n  groups.forEach(function (newG) {\n    var prevIndCnt = indices.length;\n    concatGroup({\n      indices: indices,\n      vertices: vertices\n    }, newG);\n\n    _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);\n  }); // build geometry\n\n  indices.length && this.setIndex(indices);\n  vertices.length && this[setAttributeFn]('position', new THREE.Float32BufferAttribute(vertices, 3)); //\n\n  function genPoint(coords, r) {\n    var vertices = polar2Cartesian(coords[1], coords[0], r);\n    var indices = [];\n    return [{\n      vertices: vertices,\n      indices: indices\n    }];\n  }\n\n  function genMultiPoint(coords, r) {\n    var result = {\n      vertices: [],\n      indices: []\n    };\n    coords.map(function (c) {\n      return genPoint(c, r);\n    }).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          newPnt = _ref2[0];\n\n      concatGroup(result, newPnt);\n    });\n    return [result];\n  }\n\n  function genLineString(coords, r) {\n    var coords3d = interpolateLine(coords, resolution).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          lng = _ref4[0],\n          lat = _ref4[1];\n\n      return polar2Cartesian(lat, lng, r);\n    });\n\n    var _earcut$flatten = earcut.flatten([coords3d]),\n        vertices = _earcut$flatten.vertices;\n\n    var numPoints = Math.round(vertices.length / 3);\n    var indices = [];\n\n    for (var vIdx = 1; vIdx < numPoints; vIdx++) {\n      indices.push(vIdx - 1, vIdx);\n    }\n\n    return [{\n      vertices: vertices,\n      indices: indices\n    }];\n  }\n\n  function genMultiLineString(coords, r) {\n    var result = {\n      vertices: [],\n      indices: []\n    };\n    coords.map(function (c) {\n      return genLineString(c, r);\n    }).forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          newLine = _ref6[0];\n\n      concatGroup(result, newLine);\n    });\n    return [result];\n  }\n\n  function genPolygon(coords, r) {\n    var coords3d = coords.map(function (coordsSegment) {\n      return interpolateLine(coordsSegment, resolution).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            lng = _ref8[0],\n            lat = _ref8[1];\n\n        return polar2Cartesian(lat, lng, r);\n      });\n    }); // Each point generates 3 vertice items (x,y,z).\n\n    var _earcut$flatten2 = earcut.flatten(coords3d),\n        vertices = _earcut$flatten2.vertices,\n        holes = _earcut$flatten2.holes;\n\n    var firstHoleIdx = holes[0] || Infinity;\n    var outerVertices = vertices.slice(0, firstHoleIdx);\n    var holeVertices = vertices.slice(firstHoleIdx);\n    var holesIdx = new Set(holes);\n    var numPoints = Math.round(vertices.length / 3);\n    var outerIndices = [],\n        holeIndices = [];\n\n    for (var vIdx = 1; vIdx < numPoints; vIdx++) {\n      if (!holesIdx.has(vIdx)) {\n        if (vIdx < firstHoleIdx) {\n          outerIndices.push(vIdx - 1, vIdx);\n        } else {\n          holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);\n        }\n      }\n    }\n\n    var groups = [{\n      indices: outerIndices,\n      vertices: outerVertices\n    }];\n\n    if (holes.length) {\n      groups.push({\n        indices: holeIndices,\n        vertices: holeVertices\n      });\n    }\n\n    return groups;\n  }\n\n  function genMultiPolygon(coords, r) {\n    var outer = {\n      vertices: [],\n      indices: []\n    };\n    var holes = {\n      vertices: [],\n      indices: []\n    };\n    coords.map(function (c) {\n      return genPolygon(c, r);\n    }).forEach(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n          newOuter = _ref10[0],\n          newHoles = _ref10[1];\n\n      concatGroup(outer, newOuter);\n      newHoles && concatGroup(holes, newHoles);\n    });\n    var groups = [outer];\n    holes.vertices.length && groups.push(holes);\n    return groups;\n  }\n}\n\nGeoJsonGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nGeoJsonGeometry.prototype.constructor = GeoJsonGeometry; //\n\nfunction concatGroup(main, extra) {\n  var prevVertCnt = Math.round(main.vertices.length / 3);\n  concatArr(main.vertices, extra.vertices);\n  concatArr(main.indices, extra.indices.map(function (ind) {\n    return ind + prevVertCnt;\n  }));\n}\n\nfunction concatArr(target, src) {\n  var _iterator = _createForOfIteratorHelper(src),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var e = _step.value;\n      target.push(e);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction polar2Cartesian(lat, lng) {\n  var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var phi = (90 - lat) * Math.PI / 180;\n  var theta = (90 - lng) * Math.PI / 180;\n  return [r * Math.sin(phi) * Math.cos(theta), // x\n  r * Math.cos(phi), // y\n  r * Math.sin(phi) * Math.sin(theta) // z\n  ];\n}\n\nexport { GeoJsonGeometry };\n"]},"metadata":{},"sourceType":"module"}