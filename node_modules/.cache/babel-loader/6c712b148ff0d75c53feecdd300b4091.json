{"ast":null,"code":"import _toConsumableArray from\"/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import Globe from'react-globe.gl';import{useState,useEffect,useMemo,React}from'react';import{Box}from'@material-ui/core';import*as d3 from'd3';//import GraphAll from './GraphAll';\nimport{BarChart,Bar,XAxis,YAxis,Tooltip,Legend}from'recharts';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var vac_data=[{country:'China',total_vaccine:366910000},{country:'USA',total_vaccine:266596486.0},{country:'India',total_vaccine:178361846},{country:'UK',total_vaccine:54797640},{country:'Brazil',total_vaccine:50308106},{country:'Germany',total_vaccine:38646171},{country:'France',total_vaccine:27455748},{country:'Italy',total_vaccine:25948925},{country:'Turkey',total_vaccine:25402277},{country:'Russia',total_vaccine:22782931}];var infection_data=[{country:'USA',infection:32557444},{country:'India',infection:21077410},{country:'Brazil',infection:14930183},{country:'France',infection:5767541},{country:'Turkey',infection:4955594},{country:'Russia',infection:4792354},{country:'UK',infection:4441644},{country:'Italy',infection:4070400},{country:'Spain',infection:3551262},{country:'Germany',infection:3484755}];var World=function World(){var _useState=useState({features:[]}),_useState2=_slicedToArray(_useState,2),countries=_useState2[0],setCountries=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),hoverD=_useState4[0],setHoverD=_useState4[1];useEffect(function(){// load data\nfetch('./covid.geojson').then(function(res){return res.json();}).then(setCountries);},[]);var colorScale=d3.scaleSequentialSqrt(d3.interpolateYlOrRd);// GDP per capita (avoiding countries with small pop)\nvar getVal=function getVal(feat){return feat.properties.infection/Math.max(1e5,feat.properties.POP_EST);};var maxVal=useMemo(function(){return Math.max.apply(Math,_toConsumableArray(countries.features.map(getVal)));},[countries]);colorScale.domain([0,maxVal]);return/*#__PURE__*/_jsx(Globe,{width:750,height:750,globeImageUrl:\"//unpkg.com/three-globe/example/img/earth-night.jpg\",backgroundImageUrl:\"//unpkg.com/three-globe/example/img/night-sky.png\",lineHoverPrecision:0,polygonsData:countries.features.filter(function(d){return d.properties.ISO_A2!=='AQ';}),polygonAltitude:function polygonAltitude(d){return d===hoverD?0.12:0.06;},polygonCapColor:function polygonCapColor(d){return d===hoverD?'steelblue':colorScale(getVal(d));},polygonSideColor:function polygonSideColor(){return'rgba(0, 100, 0, 0.15)';},polygonStrokeColor:function polygonStrokeColor(){return'#111';},polygonLabel:function polygonLabel(_ref){var d=_ref.properties;return\"<Button>\\n          <b >\".concat(d.COUNTRY,\" (\").concat(d.ISO_A2,\"):</b> <br />\\n          <i style=\\\"color:red;\\\">Infection: \").concat(d.infection,\"</i><br/>\\n          <i style=\\\"color:black;\\\">Death: \").concat(d.death,\"</i><br/>\\n          <i style=\\\"color:blue;\\\">Recovery: \").concat(d.recover,\"</i><br/>\\n          <i>Population: \").concat(d.POP_EST,\"</i>\\n        </Button>\");},onPolygonHover:setHoverD,polygonsTransitionDuration:300});};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(Box,{style:{display:'flex',flexDirection:'row',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(Box,{width:\"50vh\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Most Infection Country\"}),/*#__PURE__*/_jsxs(BarChart,{width:450,height:300,data:infection_data,layout:\"vertical\",children:[/*#__PURE__*/_jsx(YAxis,{type:\"category\",dataKey:\"country\",fontSize:\"10\"}),/*#__PURE__*/_jsx(XAxis,{type:\"number\"}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"infection\",fill:\"#ff0000\"})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Most Vaccination Country\"}),/*#__PURE__*/_jsxs(BarChart,{width:450,height:300,data:vac_data,layout:\"vertical\",children:[/*#__PURE__*/_jsx(YAxis,{type:\"category\",dataKey:\"country\",fontSize:\"10\"}),/*#__PURE__*/_jsx(XAxis,{type:\"number\"}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Bar,{dataKey:\"total_vaccine\",fill:\"#8884d8\"})]})]}),/*#__PURE__*/_jsx(World,{})]})});}export default App;","map":{"version":3,"sources":["/Users/lechuanwang/Documents/2021 spring/dsc106/project/dsc102/102-project/src/App.js"],"names":["Globe","useState","useEffect","useMemo","React","Box","d3","BarChart","Bar","XAxis","YAxis","Tooltip","Legend","App","vac_data","country","total_vaccine","infection_data","infection","World","features","countries","setCountries","hoverD","setHoverD","fetch","then","res","json","colorScale","scaleSequentialSqrt","interpolateYlOrRd","getVal","feat","properties","Math","max","POP_EST","maxVal","map","domain","filter","d","ISO_A2","COUNTRY","death","recover","display","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import Globe from 'react-globe.gl';\nimport { useState, useEffect, useMemo, React } from 'react';\nimport { Box } from '@material-ui/core'\nimport * as d3 from 'd3';\n//import GraphAll from './GraphAll';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from 'recharts';\n\nfunction App() {\n  const vac_data = [{country: 'China', total_vaccine: 366910000},\n    {country: 'USA', total_vaccine: 266596486.0},\n    {country: 'India', total_vaccine: 178361846},\n    {country: 'UK', total_vaccine: 54797640},\n    {country: 'Brazil', total_vaccine: 50308106},\n    {country: 'Germany', total_vaccine: 38646171},\n    {country: 'France', total_vaccine: 27455748},\n    {country: 'Italy', total_vaccine: 25948925},\n    {country: 'Turkey', total_vaccine: 25402277},\n    {country: 'Russia', total_vaccine: 22782931}];\n  \n  const infection_data = [{country: 'USA', infection: 32557444},\n    {country: 'India', infection: 21077410},\n    {country: 'Brazil', infection: 14930183},\n    {country: 'France', infection: 5767541},\n    {country: 'Turkey', infection: 4955594},\n    {country: 'Russia', infection: 4792354},\n    {country: 'UK', infection: 4441644},\n    {country: 'Italy', infection: 4070400},\n    {country: 'Spain', infection: 3551262},\n    {country: 'Germany', infection: 3484755}];\n\n  const World = () => {\n    const [countries, setCountries] = useState({ features: []});\n    const [hoverD, setHoverD] = useState();\n\n    useEffect(() => {\n      // load data\n      fetch('./covid.geojson').then(res => res.json()).then(setCountries);\n    }, []);\n\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n\n    // GDP per capita (avoiding countries with small pop)\n    const getVal = feat => feat.properties.infection / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(\n      () => Math.max(...countries.features.map(getVal)),\n      [countries]\n    );\n    colorScale.domain([0, maxVal]);\n\n    return <Globe\n      width={750}\n      height={750}\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n      backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n      lineHoverPrecision={0}\n\n      polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n      polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n      polygonCapColor={d => d === hoverD ? 'steelblue' : colorScale(getVal(d))}\n      polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n      polygonStrokeColor={() => '#111'}\n      polygonLabel={({ properties: d }) =>\n        `<Button>\n          <b >${d.COUNTRY} (${d.ISO_A2}):</b> <br />\n          <i style=\"color:red;\">Infection: ${d.infection}</i><br/>\n          <i style=\"color:black;\">Death: ${d.death}</i><br/>\n          <i style=\"color:blue;\">Recovery: ${d.recover}</i><br/>\n          <i>Population: ${d.POP_EST}</i>\n        </Button>`\n      }\n      onPolygonHover={setHoverD}\n      polygonsTransitionDuration={300}\n    />\n  };\n\n  return (\n    <div>\n      <Box style={{display:'flex', flexDirection:'row', justifyContent:'space-between'}}>\n        <Box width='50vh'>\n          <h3>Most Infection Country</h3>\n          <BarChart width={450} height={300} data={infection_data} layout='vertical'>\n              <YAxis type=\"category\" dataKey=\"country\" fontSize='10'/>\n              <XAxis type=\"number\"/>\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"infection\" fill=\"#ff0000\" />\n          </BarChart>\n          <h3>Most Vaccination Country</h3>\n          <BarChart width={450} height={300} data={vac_data} layout='vertical'>\n              <YAxis type=\"category\" dataKey=\"country\" fontSize='10'/>\n              <XAxis type=\"number\"/>\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"total_vaccine\" fill=\"#8884d8\" />\n          </BarChart>\n        </Box>\n        <World /> \n      </Box>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}